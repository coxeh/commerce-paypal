<?php

namespace craft\commerce\paypal\gateways\traits;

use craft\commerce\base\RequestResponseInterface;
use craft\commerce\models\payments\BasePaymentForm;
use craft\commerce\models\PaymentSource;
use craft\commerce\models\Transaction;
use craft\commerce\paypal\gateways\PayPalRest;
use craft\commerce\paypal\models\enum\ProductCategories;
use craft\commerce\paypal\models\enum\ProductType;

trait ProxiesRestGateway{
    /**
     * @var PayPalRest
     */
    protected $payPalRestGatway;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->payPalRestGatway = new PayPalRest([
            'clientId'=>$this->clientId,
            'secret'=>$this->secret,
            'testMode'=>$this->testMode
        ]);
    }

    public function getSettingsHtml()
    {
        $types = (new ProductType())->asOptions();
        $categories = (new ProductCategories())->asOptions();
        return \Craft::$app->getView()->renderTemplate('commerce-paypal/restSubscription/gatewaySettings', [
            'gateway' => $this,
            'types'=>$types,
            'categories'=>$categories
        ]);
    }

    /**
     * Returns payment Form HTML
     *
     * @param array $params
     * @return string|null
     */
    public function getPaymentFormHtml(array $params)
    {
        return $this->payPalRestGatway->getPaymentFormHtml($params);
    }

    /**
     * Makes an authorize request.
     *
     * @param Transaction $transaction The authorize transaction
     * @param BasePaymentForm $form A form filled with payment info
     * @return RequestResponseInterface
     */
    public function authorize(Transaction $transaction, BasePaymentForm $form): RequestResponseInterface
    {
        return $this->payPalRestGatway->authorize($transaction, $form);
    }

    /**
     * Makes a capture request.
     *
     * @param Transaction $transaction The capture transaction
     * @param string $reference Reference for the transaction being captured.
     * @return RequestResponseInterface
     */
    public function capture(Transaction $transaction, string $reference): RequestResponseInterface
    {
        return $this->payPalRestGatway->capture($transaction, $reference);
    }

    /**
     * Complete the authorization for offsite payments.
     *
     * @param Transaction $transaction The transaction
     * @return RequestResponseInterface
     */
    public function completeAuthorize(Transaction $transaction): RequestResponseInterface
    {
        return $this->payPalRestGatway->completeAuthorize($transaction);
    }

    /**
     * Complete the purchase for offsite payments.
     *
     * @param Transaction $transaction The transaction
     * @return RequestResponseInterface
     */
    public function completePurchase(Transaction $transaction): RequestResponseInterface
    {
        return $this->payPalRestGatway->completePurchase($transaction);
    }

    /**
     * Creates a payment source from source data and user id.
     *
     * @param BasePaymentForm $sourceData
     * @param int $userId
     * @return PaymentSource
     */
    public function createPaymentSource(BasePaymentForm $sourceData, int $userId): PaymentSource
    {
        return $this->payPalRestGatway->createPaymentSource($sourceData, $userId);
    }

    /**
     * Deletes a payment source on the gateway by its token.
     *
     * @param string $token
     * @return bool
     */
    public function deletePaymentSource($token): bool
    {
        return $this->payPalRestGatway->deletePaymentSource($token);
    }

    /**
     * Returns payment form model to use in payment forms.
     *
     * @return BasePaymentForm
     */
    public function getPaymentFormModel(): BasePaymentForm
    {
        return $this->payPalRestGatway->getPaymentFormModel();
    }

    /**
     * Makes a purchase request.
     *
     * @param Transaction $transaction The purchase transaction
     * @param BasePaymentForm $form A form filled with payment info
     * @return RequestResponseInterface
     */
    public function purchase(Transaction $transaction, BasePaymentForm $form): RequestResponseInterface
    {
        return $this->payPalRestGatway->purchase($transaction, $form);
    }

    /**
     * Makes an refund request.
     *
     * @param Transaction $transaction The refund transaction
     * @return RequestResponseInterface
     */
    public function refund(Transaction $transaction): RequestResponseInterface
    {
        return $this->payPalRestGatway->refund($transaction);
    }



    /**
     * Returns true if gateway supports authorize requests.
     *
     * @return bool
     */
    public function supportsAuthorize(): bool
    {
        return $this->payPalRestGatway->supportsAuthorize();
    }

    /**
     * Returns true if gateway supports capture requests.
     *
     * @return bool
     */
    public function supportsCapture(): bool
    {
        return $this->payPalRestGatway->supportsCapture();
    }

    /**
     * Returns true if gateway supports completing authorize requests
     *
     * @return bool
     */
    public function supportsCompleteAuthorize(): bool
    {
        return $this->payPalRestGatway->supportsCompleteAuthorize();
    }

    /**
     * Returns true if gateway supports completing purchase requests
     *
     * @return bool
     */
    public function supportsCompletePurchase(): bool
    {
        return $this->payPalRestGatway->supportsCompletePurchase();
    }

    /**
     * Returns true if gateway supports payment sources
     *
     * @return bool
     */
    public function supportsPaymentSources(): bool
    {
        return $this->payPalRestGatway->supportsPaymentSources();
    }

    /**
     * Returns true if gateway supports purchase requests.
     *
     * @return bool
     */
    public function supportsPurchase(): bool
    {
        return $this->payPalRestGatway->supportsPurchase();
    }

    /**
     * Returns true if gateway supports refund requests.
     *
     * @return bool
     */
    public function supportsRefund(): bool
    {
        return $this->payPalRestGatway->supportsRefund();
    }

    /**
     * Returns true if gateway supports partial refund requests.
     *
     * @return bool
     */
    public function supportsPartialRefund(): bool
    {
        return $this->payPalRestGatway->supportsPartialRefund();
    }

}